Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> RESIZE INPATH OUTPATH INTEGER INTEGER
Rule 2     statement -> CONVERT INPATH OUTPATH FORMAT
Rule 3     statement -> ROTATE INPATH OUTPATH INTEGER

Terminals, with rules where they appear

CONVERT              : 2
FORMAT               : 2
INPATH               : 1 2 3
INTEGER              : 1 1 3
OUTPATH              : 1 2 3
RESIZE               : 1
ROTATE               : 3
error                : 

Nonterminals, with rules where they appear

statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . RESIZE INPATH OUTPATH INTEGER INTEGER
    (2) statement -> . CONVERT INPATH OUTPATH FORMAT
    (3) statement -> . ROTATE INPATH OUTPATH INTEGER

    RESIZE          shift and go to state 2
    CONVERT         shift and go to state 3
    ROTATE          shift and go to state 4

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> RESIZE . INPATH OUTPATH INTEGER INTEGER

    INPATH          shift and go to state 5


state 3

    (2) statement -> CONVERT . INPATH OUTPATH FORMAT

    INPATH          shift and go to state 6


state 4

    (3) statement -> ROTATE . INPATH OUTPATH INTEGER

    INPATH          shift and go to state 7


state 5

    (1) statement -> RESIZE INPATH . OUTPATH INTEGER INTEGER

    OUTPATH         shift and go to state 8


state 6

    (2) statement -> CONVERT INPATH . OUTPATH FORMAT

    OUTPATH         shift and go to state 9


state 7

    (3) statement -> ROTATE INPATH . OUTPATH INTEGER

    OUTPATH         shift and go to state 10


state 8

    (1) statement -> RESIZE INPATH OUTPATH . INTEGER INTEGER

    INTEGER         shift and go to state 11


state 9

    (2) statement -> CONVERT INPATH OUTPATH . FORMAT

    FORMAT          shift and go to state 12


state 10

    (3) statement -> ROTATE INPATH OUTPATH . INTEGER

    INTEGER         shift and go to state 13


state 11

    (1) statement -> RESIZE INPATH OUTPATH INTEGER . INTEGER

    INTEGER         shift and go to state 14


state 12

    (2) statement -> CONVERT INPATH OUTPATH FORMAT .

    $end            reduce using rule 2 (statement -> CONVERT INPATH OUTPATH FORMAT .)


state 13

    (3) statement -> ROTATE INPATH OUTPATH INTEGER .

    $end            reduce using rule 3 (statement -> ROTATE INPATH OUTPATH INTEGER .)


state 14

    (1) statement -> RESIZE INPATH OUTPATH INTEGER INTEGER .

    $end            reduce using rule 1 (statement -> RESIZE INPATH OUTPATH INTEGER INTEGER .)

